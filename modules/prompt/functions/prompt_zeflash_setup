#
# A mix between sorin & powerline
#
# Authors:
#   zeflash
#

# Load dependencies.
pmodload 'helper'

# courtesy of Sorin
function prompt_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_pwd="$MATCH"
    unset MATCH
  else
    _prompt_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

start_time=$SECONDS
function prompt_paradox_preexec {
  start_time=$SECONDS
}

function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function prompt_zeflash_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # show elapsed time if big enough
  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 10 ]]; then
    calc_elapsed_time
  fi
  start_time=$SECONDS
}

function prompt_zeflash_setup {
  POWERLINE_SEPARATOR=$'\u2b80'
  POWERLINE_R_SEPARATOR=$'\u2b82'
  MACHINE_NAME=$(hostname)
  MACCHINE_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${MACHINE_NAME:0:1})${MACHINE_NAME:1}"
  SHORT_MACHINE_NAME=$(echo ${MACHINE_NAME%%.*} | sed 's/[a-z]\{1,\}//g')
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_zeflash_precmd
  add-zsh-hook preexec prompt_paradox_preexec

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{red}❯%F{yellow}❯%F{green}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
#  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:branch' format '%F{255}%b%f'

  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '' \
    'rprompt' "%F{blue}$POWERLINE_R_SEPARATOR%F{255}%K{blue} %b "

  # Define prompts.
  errcode=$'%{%}%(?..%F{red}$POWERLINE_R_SEPARATOR%K{red}$%F{255}%?) '   # Display the error code if present

  PROMPT='%K{green}%F{white}${_prompt_pwd} %k%F{green}$POWERLINE_SEPARATOR%f%k${git_info:+${(e)git_info[prompt]}}%(!.%B%F{red}⚡%f%b.) '
  RPROMPT=$errcode'${git_info[rprompt]}%F{255}$POWERLINE_R_SEPARATOR%K{255}%F{240} %* %F{166}$POWERLINE_R_SEPARATOR%K{166}%F{white}$SHORT_MACHINE_NAME'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_zeflash_setup "$@"

